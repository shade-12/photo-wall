{"version":3,"sources":["styles/theme.tsx","components/Banner.tsx","components/PhotoContainer.tsx","services/uploadPhoto.tsx","components/UploadButton.tsx","services/getPhotos.tsx","pages/App.tsx","serviceWorker.ts","index.tsx","assets/github-avatar.svg"],"names":["theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","fontFamily","responsiveFontSizes","useStyles","makeStyles","root","backgroundColor","color","padding","avatar","height","width","margin","chipContainer","spacing","gridItem","Banner","classes","Grid","container","direction","alignContent","className","item","Avatar","alt","src","githubAvatar","style","Typography","variant","gutterBottom","Chip","label","clickable","icon","fontSize","component","href","target","createStyles","display","flexWrap","justifyContent","overflow","PhotoContainer","props","photoArray","rearrange","doneRearrange","useState","tiles","setTiles","useEffect","rearrangeTiles","availableCols","arrangedTiles","map","tile","maxVal","cols","Math","min","floor","random","GridListTile","key","title","Box","GridList","cellHeight","uploadPhoto","file","Promise","resolve","reject","formData","FormData","append","axios","post","process","headers","then","res","catch","err","JSON","stringify","button","textTransform","input","UploadButton","startRearrange","m","accept","type","id","onChange","event","files","length","alert","size","includes","cb","data","console","log","htmlFor","Button","startIcon","onClick","defaultProps","getPhotos","get","appContainer","flexFlow","App","setPhotoArray","setRearrange","fetchLatestPhotos","tileData","substring","fileUrl","newPhoto","prevArr","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.a1a101f5.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#ffcad4',\n            main: '#ffe5d9',\n            dark: '#f4acb7',\n            contrastText: '#355070'\n        },\n        secondary: {\n            light: '#d8e2dc',\n            main: '#9d8189'\n        }\n    },\n    typography: {\n        fontFamily: 'Raleway'\n    }\n});\n\nexport default responsiveFontSizes(theme);","import React from 'react';\nimport { Theme, makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport EmailIcon from '@material-ui/icons/Email';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport githubAvatar from '../assets/github-avatar.svg';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\troot: {\n\t\tbackgroundColor: theme.palette.primary.dark,\n\t\tcolor: theme.palette.primary.contrastText,\n\t\tpadding: '1rem'\n\t},\n\tavatar: {\n\t\theight: '15vw',\n        width: '15vw',\n        margin: '1rem'\n\t},\n\tchipContainer: {\n\t\t'& > *': {\n\t\t\tmargin: theme.spacing(0.5)\n\t\t}\n\t},\n\tgridItem: {\n\t\twidth: 'fit-content'\n\t}\n}));\n\nfunction Banner() {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Grid container direction=\"row\" alignContent=\"center\" className={classes.root}>\n\t\t\t<Grid item className={classes.gridItem}>\n\t\t\t\t<Avatar alt=\"github-avatar\" src={githubAvatar} className={classes.avatar} />\n\t\t\t</Grid>\n\t\t\t<Grid item container direction=\"column\" className={classes.gridItem} style={{ margin: '1rem' }}>\n\t\t\t\t<Typography variant=\"h4\" gutterBottom><b>Shade Wong</b></Typography>\n\t\t\t\t<Grid item container className={classes.chipContainer}>\n\t\t\t\t\t<Chip label=\"University of British Columbia\" color=\"primary\" />\n\t\t\t\t\t<Chip label=\"BASc Computer Engineering\" color=\"secondary\" />\n\t\t\t\t\t<Chip label=\"AWS Certified Developer - Associate\" color=\"primary\" />\n\t\t\t\t</Grid>\n\t\t\t\t<br />\n\t\t\t\t<Typography variant=\"h6\" gutterBottom><b>Connect with me</b></Typography>\n\t\t\t\t<Grid item container className={classes.chipContainer}>\n\t\t\t\t\t<Chip \n\t\t\t\t\t\tlabel=\"Github\"\n\t\t\t\t\t\tclickable\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\ticon={<GitHubIcon fontSize=\"small\" />}\n\t\t\t\t\t\tcomponent=\"a\"\n\t\t\t\t\t\thref=\"https://github.com/shade-12\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel=\"LinkedIn\"\n\t\t\t\t\t\tclickable\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\ticon={<LinkedInIcon fontSize=\"small\" />}\n\t\t\t\t\t\tcomponent=\"a\"\n\t\t\t\t\t\thref=\"https://www.linkedin.com/in/shade-wong-ab4a91192/\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\tclickable\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\ticon={<EmailIcon fontSize=\"small\" />}\n\t\t\t\t\t\tcomponent=\"a\"\n\t\t\t\t\t\thref=\"mailto:shadeying@alumni.ubc.ca\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel=\"Résumé\"\n\t\t\t\t\t\tclickable\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\ticon={<DescriptionIcon fontSize=\"small\" />}\n\t\t\t\t\t\tcomponent=\"a\"\n\t\t\t\t\t\thref=\"https://drive.google.com/file/d/1v4IVJ_GtVa7t8C5I-ntOXouewwRu63Pa/view?usp=sharing\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t\n\t\t</Grid>\n\t);\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport { IPhoto } from '../interfaces';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-around',\n            overflow: 'hidden'\n        }\n    })\n);\n\ninterface IPhotoContainerProps {\n    photoArray: IPhoto[],\n    rearrange: boolean,\n    doneRearrange: Function\n};\n\nconst MAX_COLS = 5;\n\n/**\n * Generate a random integer between 1 and @param maxVal, inclusive\n * @param {Number} maxVal The largest possible number that can be generated\n * @return {Number} A random integer between 1 and @param maxVal, inclusive\n */\nconst getRandomInt = (maxVal: number) :number => {\n  return Math.floor(Math.random() * Math.floor(maxVal)) + 1;\n};\n\nfunction PhotoContainer(props: IPhotoContainerProps) {\n    const classes = useStyles();\n    const { photoArray, rearrange, doneRearrange } = props;\n    const [tiles, setTiles] = useState<typeof GridListTile[] | any[]>([]);\n\n    useEffect(() => {\n        if (rearrange)\n            rearrangeTiles();\n    }, [rearrange]);\n\n    const rearrangeTiles = () => {\n        if (process.env.NODE_ENV !== 'production')\n            console.log(`rearrangeTiles::info - running...`);\n        let availableCols: number = MAX_COLS;\n        const arrangedTiles = photoArray.map((tile) => {\n            let cols: number = Math.min(getRandomInt(MAX_COLS), availableCols);\n            if (cols < availableCols)\n                availableCols -= cols;\n            else\n                availableCols = MAX_COLS;\n            return  <GridListTile key={tile.src} cols={cols}>\n                        <img src={tile.src} alt={tile.title} />\n                    </GridListTile>\n        });\n        setTiles(arrangedTiles);\n        doneRearrange();\n    };\n\n\treturn (\n\t\t<Box className={classes.root}>\n            <GridList cellHeight={300} spacing={8} cols={MAX_COLS}>\n                {tiles}\n            </GridList>\n        </Box>\n\t);\n}\n\nexport default PhotoContainer;","import axios from 'axios';\n\nconst baseUrl = (process.env.NODE_ENV === 'production') ?\n                process.env.REACT_APP_PROD_BASE_URL :\n                process.env.REACT_APP_DEV_BASE_URL;\n\nconst uploadPhoto = (file: File) :Promise<any> => {\n    return new Promise((resolve, reject) => {\n        const formData = new FormData();\n        formData.append('photo', file);\n        axios\n            .post(`${baseUrl}/photos/upload`, formData, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Accept-Language': 'en-US,en;q=0.8',\n                    'Content-Type': 'multipart/form-data'\n                }\n            })\n            .then(res => resolve(res))\n            .catch(err => reject(JSON.stringify(err)));\n    });\n};\n\nexport default uploadPhoto;","import React from 'react';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\nimport uploadPhoto from '../services/uploadPhoto';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n            overflow: 'hidden',\n            '& > *': {\n                margin: theme.spacing(0.5)\n            }\n        },\n        button: {\n            textTransform: 'none'\n        },\n        input: {\n            display: 'none'\n        }\n    })\n);\n\ninterface IUploadButtonProps {\n    cb?: Function,\n    startRearrange: Function\n};\n\nconst isValidFileFormat = (type: string) :boolean => {\n    const validFormat = [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/svg\", \"image/gif\"];\n    return validFormat.includes(type);\n};\n\nconst maxFileSize = 5000000; // 5MB\n\nfunction UploadButton(props: IUploadButtonProps) {\n    const classes = useStyles();\n    const { startRearrange } = props;\n    \n    const uploadImage = (event: any) => {\n        if (event.target.files.length < 1) {\n            alert('Please select a photo to upload.');\n            return;\n        }\n        if (event.target.files.length > 1) {\n            alert('Please upload one photo at a time.');\n            return;\n        }\n        if(event.target.files[0].size > maxFileSize) {\n            alert('Please upload a photo smaller than 5 MB.');\n            return;\n        } \n        if(!isValidFileFormat(event.target.files[0].type)) {\n            alert('Only JPG, PNG, GIF and SVG photos are supported at this time.');\n            return;\n        }\n        uploadPhoto(event.target.files[0])\n        .then(res => {\n            if (process.env.NODE_ENV !== 'production')\n                console.log(`uploadPhoto::success - ${res.data}`);\n            if (typeof props.cb === 'function')\n                props.cb(res.data);\n            return;\n        })\n        .catch(err => console.log(`uploadPhoto::error - ${err}`));\n    };\n\n\treturn (\n\t\t<Box m={3} className={classes.root}>\n            <input \n                accept=\"image/*\" \n                className={classes.input}\n                type=\"file\" \n                id=\"upload-photo\"\n                onChange={uploadImage}\n            />\n            <label htmlFor=\"upload-photo\">\n                <Typography variant=\"h6\">\n                    <Button\n                        variant=\"contained\"\n                        component=\"span\"\n                        color=\"secondary\"\n                        startIcon={<PhotoCameraIcon />}\n                        className={classes.button}\n                    >\n                        <b>Upload photo</b>\n                    </Button>\n                </Typography>\n            </label>\n            <Typography variant=\"h6\">\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<AutorenewIcon />}\n                    className={classes.button}\n                    onClick={() => startRearrange()}\n                >\n                    <b>Generate different layout</b>\n                </Button>\n            </Typography>\n        </Box>\n\t);\n}\n\nUploadButton.defaultProps = {\n    cb: () => {}\n};\n\nexport default UploadButton;","import axios from 'axios';\n\nconst baseUrl = (process.env.NODE_ENV === 'production') ?\n                process.env.REACT_APP_PROD_BASE_URL :\n                process.env.REACT_APP_DEV_BASE_URL;\n\nconst getPhotos = () :Promise<any> => {\n    return new Promise((resolve, reject) => {\n        axios\n            .get(`${baseUrl}/photos`)\n            .then(res => resolve(res))\n            .catch(err => reject(JSON.stringify(err)));\n    });\n};\n\nexport default getPhotos;","import React, { useEffect, useState } from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Box from '@material-ui/core/Box';\nimport Banner from '../components/Banner';\nimport PhotoContainer from '../components/PhotoContainer';\nimport UploadButton from '../components/UploadButton';\nimport { IPhoto } from '../interfaces';\nimport getPhotos from '../services/getPhotos';\n\nconst useStyles = makeStyles(() => ({\n  appContainer: {\n    display: 'flex',\n    flexFlow: 'column wrap',\n    justifyContent: 'center'\n  }\n}));\n\n/**\n * Generate an array of photo data\n * @param {String[]} photoKeys An array of object keys\n * @return {Photo[]} \n */\nconst generateTileData = (photoKeys: string[]) :IPhoto[] => {\n  return photoKeys.map((key :string) => {\n    return {\n      src: process.env.REACT_APP_IMG_BASE_URL + key,\n      title: key.substring(25)\n    };\n  });\n};\n\nfunction App() {\n  const classes = useStyles();\n  const [photoArray, setPhotoArray] = useState<IPhoto[] | any[]>([]);\n  const [rearrange, setRearrange] = useState<boolean>(false);\n\n  useEffect(() => fetchLatestPhotos(), []);\n\n  const fetchLatestPhotos = () => {\n    getPhotos()\n    .then(res => {\n      if (process.env.NODE_ENV !== 'production')\n        console.log(`getPhotos::success - ${JSON.stringify(res.data, null, 2)}`);\n      const tileData = generateTileData(res.data);\n      if (process.env.NODE_ENV !== 'production')\n        console.log(`generateTileData::info - ${JSON.stringify(tileData, null, 2)}`);\n      setPhotoArray(tileData);\n      setRearrange(true);\n    })\n    .catch(err => console.log(`getPhotos::error - ${err}`));\n  };\n\n  const updatePhotoArray = (fileUrl: string) => {\n    const newPhoto = {\n      src: fileUrl,\n      title: fileUrl.substring(80)\n    };\n    if (process.env.NODE_ENV !== 'production')\n      console.log(`updatePhotoArray::info - ${JSON.stringify(newPhoto, null, 2)}`);\n    setPhotoArray(prevArr => [newPhoto].concat(prevArr));\n    setRearrange(true);\n  };\n\n  const startRearrange = () => {\n    console.log(`startRearrange::info - running...`);\n    setRearrange(true);\n  };\n\n  const doneRearrange = () => {\n    console.log(`doneRearrange::info - done.`);\n    setRearrange(false);\n  };\n\n  return (\n    <Box m={4} className={classes.appContainer}>\n      <Banner />\n      <UploadButton cb={updatePhotoArray} startRearrange={startRearrange} />\n      <PhotoContainer photoArray={photoArray} rearrange={rearrange} doneRearrange={doneRearrange} />\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport Theme from './styles/theme';\nimport './styles/index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={Theme}>\n      <App />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/github-avatar.27e8789f.svg\";"],"sourceRoot":""}